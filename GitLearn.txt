--------------------------创建版本库--------------------------------------
创建一个版本库，创建一个空目录：
$mkdir learngit
$cd learngit

把learngit目录变成Git仓库：
$git init

添加文件到Git仓库：
提交工作区到暂存区
$git add <file>...
把暂存区的修改提交到分支
$git commit -m "注释"

查看仓库当前的状态：
$git status

查看修改的内容：
$git diff

查看工作区和版本库里面最新版本的区别：
$git diff HEAD -- <file>

查看历史记录：
$git log
--pretty=oneline简化历史记录输出信息:
$git log --pretty=oneline

--------------------------版本回退--------------------------------------
在Git中，HEAD表示当前版本，HEAD^上一版本，HEAD^^上上一版本，上100个版本HEAD~100

回退到上一版本:
$git reset --hard HEAD^

回退到某一版本：
$git reset --hard 版本号

重返未来，确定未来的哪个版本：
$git reflog

--------------------------撤销修改--------------------------------------
丢弃工作区的修改：
$git checkout -- <file>...

撤销暂存区的修改，重新放回工作区：
$git reset HEAD <file>...

git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。

--------------------------删除文件--------------------------------------
从版本库中删除文件：
$git rm <file>...

--------------------------添加远程--------------------------------------
把一个已有的本地仓库与GitHub仓库关联：
$git remote add origin git@github.com:zhangxyGitHub/learngit.git

git添加远程github仓库的时候提示错误：fatal: remote origin already exists.
解决办法如下：先删除远程Git仓库，再添加远程仓库关联
$git remote rm origin

把本地仓库的内容推送到GitHub仓库：
$git push -u origin master

第一次推送master分支，加上-u参数
此后，每次本地提交后，只要有必要，就可以使用命令
git push origin master推送最新修改

--------------------------从远程克隆--------------------------------------
从远程库克隆：
$git clone git@github.com:zhangxyGitHub/gitskills.git

-----------------------创建与合并分支----------------------------------
创建dev分支，并切换到dev分支：
$git checkout -b dev
git checkout命令加上-b参数，表示创建并切换，相当于以下两条命令：
$git branch dev
$git checkout dev

查看当前分支：
$git branch

合并指定分支到当前分支：
$git merge dev

删除分支：
$git branch -d dev

--------------------------解决冲突--------------------------------------
用带参数的git log也可以看到分支的合并情况：
$git log --graph --pretty=oneline --abbrev-commit

--------------------------分支管理策略--------------------------------------
合并dev分支，--no-ff参数，表示禁用Fast forward
$git merge --no-ff -m "merge with no-ff" dev

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

--------------------------Bug分支--------------------------------------
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

--------------------------Feature分支--------------------------------------
开发一个新feature，最好新建一个分支；
git branch -d <name>删除分支
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

--------------------------多人协作--------------------------------------
查看远程库的信息：
$git remote
或者，用git remote -v显示更详细的信息


推送分支。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
$git push origin master
如果推送失败，先用git pull抓取远程的新提交

在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致
$git checkout -b branch-name origin/branch-name

建立本地分支和远程分支的关联
$git branch --set-upstream branch-name origin/branch-name

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

--------------------------创建标签--------------------------------------
查看所有标签：
$git tag

创建一个标签，默认为HEAD，也可以指定一个commitid
$git tag <name>

查找历史提交的commitid：
$git log --pretty=oneline --abbrev-commit
$git tag <name> commitid

查看标签信息：
$git show <tagname>

创建带有说明的标签，-a指定标签名，-m指定说明文字
$git tag -a <tagname> -m "版本v0.1" commitid

创建PGP签名标签，-s用私钥签名一个标签
$git tag -s <tagname> -m "描述" commitid

--------------------------操作标签--------------------------------------
如果标签打错了，可以删除标签：
删除一个本地标签：
$git tag -d <tagname>

删除一个远程标签：
$git push origin :refs/tags/<tagname>

推送一个本地标签到远程：
$git push origin <tagname>

推送全部未推送过的本地标签到远程：
$git push origin --tags






